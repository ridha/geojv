package web

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

var _indexHtml = []byte{
	0x1f, 0x8b, 0x8, 0x0, 0x0, 0x9, 0x6e, 0x88, 0x0, 0xff, 0x84, 0x56, 0xdf, 0x6f, 0xdb,
	0x36, 0x10, 0x7e, 0xcf, 0x5f, 0x71, 0xd3, 0xb0, 0x5a, 0xe, 0x5c, 0x29, 0xc5, 0x5e, 0x6,
	0x47, 0xca, 0x90, 0xba, 0x41, 0xd1, 0xcd, 0x59, 0x82, 0xa6, 0xc3, 0xb0, 0xbd, 0x5d, 0xc4,
	0xb3, 0xc4, 0x99, 0x22, 0x5, 0x92, 0xb6, 0xa3, 0x1a, 0xfa, 0xdf, 0x7, 0x4a, 0x94, 0x2d,
	0x3b, 0x5a, 0xeb, 0x97, 0x38, 0xc7, 0xef, 0xee, 0xbe, 0xfb, 0x3e, 0xfe, 0x70, 0xf2, 0xc3,
	0x87, 0x87, 0xc5, 0x97, 0xbf, 0x1f, 0xef, 0xa0, 0xb0, 0xa5, 0xb8, 0xb9, 0x48, 0xba, 0x3f,
	0x0, 0x49, 0x41, 0xc8, 0xdc, 0x17, 0x80, 0xc4, 0x72, 0x2b, 0xe8, 0xe6, 0x23, 0xa9, 0xdf,
	0x9e, 0x1e, 0xfe, 0x80, 0x2d, 0xa7, 0x1d, 0xe9, 0x24, 0xee, 0xa2, 0x1d, 0xa2, 0x24, 0x8b,
	0x20, 0xb1, 0xa4, 0x34, 0x70, 0xcb, 0x95, 0xd2, 0x36, 0x80, 0x4c, 0x49, 0x4b, 0xd2, 0xa6,
	0x1, 0x97, 0xdc, 0x72, 0x14, 0x6f, 0x4d, 0x86, 0x82, 0xd2, 0x77, 0xd1, 0x55, 0x30, 0x4c,
	0xcb, 0xa, 0xd4, 0x86, 0x6c, 0x1a, 0x6c, 0xec, 0xea, 0xed, 0x2f, 0xfd, 0x92, 0xb1, 0x75,
	0x5f, 0x1d, 0x20, 0xbe, 0x84, 0x5b, 0xb1, 0xc3, 0xda, 0x80, 0x21, 0xb, 0xb6, 0x20, 0x28,
	0xb1, 0x82, 0x82, 0x78, 0x5e, 0x58, 0xa0, 0x97, 0x4a, 0xf0, 0x8c, 0x5b, 0x51, 0x83, 0x55,
	0xc0, 0x68, 0xc5, 0x25, 0xb5, 0x18, 0xc3, 0xbf, 0x12, 0xa8, 0x55, 0xfb, 0x9d, 0xf1, 0xad,
	0xaf, 0x5, 0x97, 0x40, 0x82, 0x4a, 0x92, 0xae, 0x10, 0xda, 0x96, 0x25, 0x72, 0x69, 0xfa,
	0xb2, 0x11, 0x5c, 0xc6, 0x1e, 0xfa, 0xa3, 0xeb, 0xb2, 0xef, 0xf3, 0x7c, 0xbf, 0x39, 0xbc,
	0xbb, 0xba, 0xfa, 0xe9, 0xda, 0x47, 0x9b, 0x23, 0xc3, 0x87, 0xca, 0x72, 0x25, 0x51, 0xcc,
	0xe1, 0x1e, 0xd7, 0xd4, 0xd5, 0x33, 0x58, 0x56, 0x82, 0xa0, 0xc2, 0x9c, 0x60, 0xc5, 0x85,
	0x68, 0x83, 0x3b, 0x2e, 0x99, 0xda, 0xd, 0xfa, 0x38, 0xcd, 0x67, 0xf0, 0xac, 0x58, 0xfd,
	0x9d, 0x6e, 0x0, 0x25, 0xea, 0x9c, 0xcb, 0x39, 0x5c, 0x1d, 0x43, 0x15, 0x32, 0xc6, 0x65,
	0x3e, 0x88, 0x75, 0xa4, 0x92, 0xf8, 0xa0, 0x61, 0x12, 0xf7, 0x6e, 0x26, 0xae, 0x8b, 0x97,
	0x98, 0xf1, 0x2d, 0x70, 0x96, 0x6, 0x25, 0x56, 0xc1, 0x4d, 0x12, 0x33, 0xbe, 0xed, 0xb5,
	0xcf, 0x34, 0xaf, 0xac, 0x17, 0x7f, 0x8b, 0xda, 0xc9, 0x72, 0x7d, 0xd1, 0xfe, 0xbb, 0xda,
	0xc8, 0xcc, 0x8d, 0x9, 0xce, 0xd3, 0x7b, 0xac, 0xc2, 0xe9, 0x80, 0xb2, 0x93, 0x2b, 0x5,
	0x49, 0x3b, 0xc8, 0x95, 0xca, 0x5, 0x45, 0x25, 0x56, 0x26, 0x72, 0x28, 0xa6, 0xb2, 0x8d,
	0x93, 0x3c, 0xca, 0xc9, 0xde, 0x75, 0xea, 0xbf, 0xaf, 0x3f, 0xb1, 0x70, 0x52, 0x62, 0x35,
	0x99, 0xce, 0x6, 0x35, 0xdc, 0xe7, 0xab, 0x52, 0xe5, 0x1c, 0xf6, 0xfb, 0xe8, 0x1f, 0xa5,
	0xca, 0xa6, 0x99, 0x9d, 0x2c, 0x96, 0x58, 0x7d, 0xa9, 0x2b, 0x5a, 0x28, 0x69, 0xb5, 0x12,
	0x73, 0xb0, 0x7a, 0x43, 0xa3, 0x88, 0x4f, 0x6c, 0x7e, 0xce, 0xa3, 0xb, 0x47, 0x9f, 0x1f,
	0x6e, 0x3f, 0xdc, 0xdf, 0x3e, 0x1e, 0x92, 0x9a, 0xa9, 0x9f, 0xae, 0x75, 0x32, 0x86, 0x27,
	0xbf, 0xc9, 0x8c, 0xd5, 0x6a, 0xed, 0xfc, 0x62, 0xb6, 0x98, 0x1, 0x4a, 0xd6, 0x79, 0x98,
	0x29, 0xa1, 0x34, 0xac, 0x94, 0x6, 0xc2, 0xac, 0x80, 0x4a, 0x89, 0x3a, 0x57, 0x72, 0xa8,
	0x42, 0xc4, 0xd0, 0x62, 0x64, 0xc8, 0x3e, 0x39, 0x7, 0xc2, 0xd3, 0xe9, 0x5c, 0x8d, 0x85,
	0x2b, 0x31, 0x87, 0x49, 0xae, 0x89, 0xe4, 0xe4, 0x94, 0x7e, 0xd7, 0xf5, 0xaf, 0xde, 0xfe,
	0x71, 0x96, 0xce, 0x95, 0x67, 0xb5, 0x91, 0xcc, 0x8c, 0x28, 0xbe, 0x44, 0xbb, 0x94, 0xf9,
	0xfb, 0x76, 0x39, 0x1c, 0x66, 0xd, 0x41, 0xb4, 0x75, 0x7e, 0x20, 0x63, 0x4b, 0x6e, 0x2c,
	0x49, 0xd2, 0x61, 0x4f, 0x7c, 0x36, 0x41, 0xc6, 0x56, 0x84, 0x76, 0xa3, 0x69, 0x32, 0xeb,
	0x1d, 0xf, 0x69, 0x7a, 0x3a, 0x47, 0x4e, 0xaa, 0x24, 0xab, 0x6b, 0x48, 0x81, 0x22, 0xf,
	0x77, 0xfe, 0x7e, 0xf4, 0x71, 0xd7, 0xf9, 0x64, 0xae, 0x1d, 0xb7, 0x59, 0x1, 0x61, 0x9f,
	0xe7, 0xb0, 0xce, 0x90, 0x70, 0x3a, 0x3d, 0xf3, 0x3f, 0x43, 0x43, 0x10, 0xf4, 0x75, 0x16,
	0x4a, 0x8, 0x6a, 0x29, 0x4, 0xf3, 0x13, 0xd8, 0x90, 0x84, 0x2b, 0x76, 0xab, 0x35, 0xd6,
	0xe1, 0x34, 0x5a, 0x29, 0x7d, 0x87, 0x59, 0x11, 0x1e, 0x98, 0x7b, 0x87, 0xce, 0xf8, 0xf7,
	0x1f, 0x7a, 0xb1, 0x24, 0x99, 0x57, 0xab, 0x87, 0x5e, 0xbf, 0x82, 0x36, 0xd3, 0x57, 0xa1,
	0x67, 0x4d, 0xb8, 0xbe, 0x1e, 0xa1, 0xfe, 0xd8, 0x55, 0x19, 0xe1, 0x7b, 0xd2, 0xac, 0x27,
	0x3f, 0xd2, 0x6d, 0xa4, 0x74, 0x33, 0xbe, 0x13, 0xe, 0x27, 0x72, 0x74, 0x8e, 0x33, 0x65,
	0x7d, 0xf8, 0xdb, 0x6a, 0xa1, 0x2d, 0xce, 0xf3, 0xda, 0x5c, 0xb4, 0xc5, 0x37, 0x13, 0x45,
	0xbb, 0xed, 0xfe, 0x47, 0xe5, 0x6e, 0xb3, 0x46, 0x1d, 0xc9, 0x1e, 0x3a, 0xa6, 0xf2, 0x40,
	0xe7, 0xe6, 0xf4, 0x58, 0x2e, 0x15, 0x32, 0xf0, 0xaf, 0x50, 0x74, 0xcc, 0x3c, 0x9c, 0x37,
	0xa1, 0x90, 0xb9, 0x65, 0xa3, 0x64, 0xb8, 0xdf, 0x47, 0x1e, 0xf9, 0xe7, 0xe7, 0x65, 0xd3,
	0xcc, 0x40, 0x6e, 0x84, 0x98, 0x1d, 0xc5, 0xa, 0xfd, 0x86, 0x35, 0xaf, 0x26, 0x75, 0xe5,
	0xc, 0xd9, 0x5, 0x49, 0x4b, 0x3a, 0xf4, 0xb4, 0xf3, 0x43, 0x60, 0x7a, 0x4e, 0xda, 0xe1,
	0x57, 0xdc, 0x7a, 0xdd, 0x3b, 0xfc, 0x39, 0xe6, 0x78, 0x52, 0x37, 0x42, 0xc, 0xd6, 0x8e,
	0x46, 0x1e, 0xae, 0xec, 0xc1, 0xd5, 0xeb, 0xef, 0x61, 0x40, 0x53, 0xcb, 0xcc, 0x3d, 0x6c,
	0xa4, 0xdb, 0xb8, 0xd1, 0x59, 0x1a, 0x14, 0xd6, 0x56, 0x66, 0x1e, 0xc7, 0xed, 0x59, 0xee,
	0xce, 0x35, 0x56, 0xdc, 0x44, 0x99, 0x2a, 0xdb, 0x58, 0x8c, 0x15, 0x8f, 0xff, 0x35, 0xbf,
	0x6e, 0xd3, 0x9f, 0x23, 0x7a, 0xa9, 0xde, 0xac, 0xa9, 0x4e, 0xf7, 0xfb, 0xe8, 0x77, 0xaa,
	0x9b, 0xe6, 0x4d, 0x86, 0x42, 0x3c, 0x63, 0xb6, 0x4e, 0xfd, 0x2d, 0xde, 0x3f, 0xba, 0xa7,
	0xed, 0xe3, 0xee, 0xad, 0xb8, 0x48, 0xe2, 0xee, 0x47, 0xc1, 0x7f, 0x1, 0x0, 0x0, 0xff,
	0xff, 0x33, 0xe6, 0x5b, 0x82, 0x2c, 0x8, 0x0, 0x0,
}

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() ([]byte, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}
	return bytes, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		bytes, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"index.html": indexHtml,
}
